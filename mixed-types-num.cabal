name:           mixed-types-num
version:        0.1
cabal-version:  >= 1.9.2
build-type:     Simple
author:         Michal Konecny
stability:      experimental
maintainer:     Michal Konecny <mikkonecny@gmail.com>
tested-with:    GHC==7.8.4, GHC==7.10.3, GHC==8.0.1
license:        BSD3
homepage:       https://github.com/michalkonecny/mixed-types-num
synopsis:       Alternative Prelude with numerical and logical expressions typed bottom-up
category:       Math
copyright:      (c) 2015, 2016 Michal Konecny, Pieter Collins
license-file:   LICENSE
Description:
    = Main purpose
    .
    This package provides a version of Prelude where
    unary and binary operations such as @not@, @+@, @==@
    have their result type derived from the parameter type(s),
    allowing, /e.g./:
    .
      * dividing an integer by an integer, giving a rational:
      .
      @let n = 1 :: Integer in n/(n+1) :: Rational@
      .
      (The type Rational would be derived automatically because
      integer literals are always of type @Integer@, not @Num t => t@.)
      .
      * adding an integer and a rational, giving a rational:
      .
      @(length [x])+1/3 :: Rational@
      .
      * taking natural, integer and fractional power using the same operator:
      .
      @2^2 :: Integer@
      .
      @2.0^(-2) :: Rational@
      .
      @(double 2)^(1/2) :: Double@
      .
      @2^(1/2) :: Real@
      .
      * comparing an integer with an (exact) real number, giving a Maybe Bool:
      .
      @... x :: Real ... if (isCertainlyTrue (x > 1)) then ...@
      .
      (@Real@ not provided by this package.
        It will be provided in a different package soon.)
      --  They are provided, /e.g./, by aern2-real.)
    .
    = Type classes
    .
    Arithmetic operations are provided via multi-parameter type classes
    and the result type is given by associated
    type families. For example:
    .
    @(+) :: (CanAddAsymmetric t1 t2) => t1 -> t2 -> AddType t1 t2@
    .
    Each such type class is accompanied by a hspec test suite,
    which can be applied to instance types.
    .
    = Further reading
    .
    To find out more, please read the documentation for the modules
    in the order specified in "Numeric.MixedTypes".
    .
    = Origin
    .
    The idea of having numeric expressions in Haskell with types
    derived bottom-up was initially suggested and implemented by Pieter Collins.
    This version is a fresh rewrite by Michal Konečný.

library
  hs-source-dirs:  src
  build-depends:
    base == 4.*
    , convertible >= 1.1.1.0 && < 1.2
    , hspec >= 2.1 && < 2.3
    , hspec-smallcheck >= 0.3 && < 0.5
    , smallcheck == 1.1.*
    , QuickCheck >= 2.7 && < 2.9
  ghc-options:     -Wall -fno-warn-orphans
  extensions:
    RebindableSyntax,
    PostfixOperators,
    ScopedTypeVariables,
    TypeFamilies,
    TypeOperators,
    ConstraintKinds,
    DefaultSignatures,
    MultiParamTypeClasses,
    FlexibleContexts,
    FlexibleInstances,
    UndecidableInstances
  exposed-modules:
    Numeric.MixedTypes
    Numeric.MixedTypes.PreludeHiding
    Numeric.MixedTypes.Literals
    Numeric.MixedTypes.Bool
    Numeric.MixedTypes.Eq
    Numeric.MixedTypes.Ord
    Numeric.MixedTypes.MinMaxAbs
    Numeric.MixedTypes.AddSub
    Numeric.MixedTypes.Round
    Numeric.MixedTypes.Ring
    Numeric.MixedTypes.Field
    Numeric.MixedTypes.Elementary

test-suite spec
  type:
      exitcode-stdio-1.0
  ghc-options:
      -Wall
  extensions:
    RebindableSyntax,
    PostfixOperators,
    ScopedTypeVariables,
    FlexibleContexts
  hs-source-dirs:
      test
  main-is:
      Spec.hs
  build-depends:
    base == 4.*
    , mixed-types-num
    , hspec >= 2.1 && < 2.3
    , hspec-smallcheck >= 0.3 && < 0.5
    , QuickCheck >= 2.7 && < 2.9
